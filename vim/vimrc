set nocompatible

" runtime plugins.vim
" runtime helpers.vi
source <sfile>:h/plugins.vim
source <sfile>:h/helpers.vim
source <sfile>:h/binds.vim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global Vim config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Our leader key is ',' due to convenience
let mapleader = " "
let g:mapleader = " "

" Standard encoding should always be utf8
set encoding=utf8

" Default expected file type should be Unix
set ffs=unix,dos,mac

set clipboard^=unnamed

" Vim should remember as many lines as possible
set history=5000

" Auto read when a file is changed from the outside
set autoread

" Wild menu allows tab completion of vim commands
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store,node_modules,dist
" Makes case sensitive searches explicit
set ignorecase
set smartcase

" Completes words with ctrl-p using the case of initially typed substring
set infercase

" Highlight search results
set hlsearch

" Moves the cursor to active search target
set incsearch 
" Removes vim specific regex escaping some of the time
set magic

if has("autocmd")  
  " Auto reload *.vim files if they change
  augroup myvimrc
      au!
      au BufWritePost expand('~/.vim_runtime/*.vim') so $MYVIMRC
      " Return to last edit position when opening files
      autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  augroup END

endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global vim fixes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Git exists, who needs swap files
set nobackup
set nowb
set noswapfile

" Remove annoying shit
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Draw 200 lines back to calculate correct syntax highlight
" set c_minlines=500
" autocmd BufEnter * :syntax sync fromstart
" autocmd BufEnter * :syntax sync fromstart

" Avoid redrawing when running macros
set lazyredraw 

" Faster scrolling
set ttyfast

" The other regex engine apparently sucks - source me
" set regexpengine=1

" Allow undo even after buffer/file closed
try
  " Let's save undo info!
  if !isdirectory($HOME."/.vim_runtime")
      call mkdir($HOME."/.vim_runtime", "", 0770)
  endif
  if !isdirectory($HOME."/.vim_runtime/undo_dir")
      call mkdir($HOME."/.vim_runtime/undo_dir", "", 0700)
  endif
  set undodir=~/.vim_runtime/undo_dir
  set undofile
catch
endtry

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global Vim UX changes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Obviously sets our color scheme
set t_Co=256
if (has("termguicolors"))
  set termguicolors
endif
colorscheme gotham

" Enable syntax highlighting for code
syntax enable

" Re-enable highlighting in terminal
highlight Visual cterm=reverse ctermbg=Blue

" Shows line numbers
set number

" Displays line, col numbers on status bar
set ruler

" Renders a line at 80th character
set colorcolumn=80

" Helps avoid common 'Press Enter to Continue' message
set cmdheight=1

" Highlights matching brackets
set showmatch 

" How many tenths of a second to blink when matching brackets
set mat=2

" Widens margin for folding UX
set foldcolumn=1

" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{helpers.hasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

" Forces splits to open to the right or bottom of current window
set splitright
set splitbelow

" Height of ctrl-p menu
set pumheight=15

" Highlight current line occupied by cursor
" Currently causing perf issues
" set cursorline

" Shows as much of the last window line as possible
set display=lastline 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global text editing config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable filetype specific indentation rules
filetype plugin indent on

" Default backspace in vim won't remove multiple lines or whitespace, fix that
set backspace=eol,start,indent

" Force Vim to allow line wrapping and wrapped navigation
set whichwrap+=<,>,h,l,[,]

" Spaces instead of tabs
set expandtab

" Auto tabs for certain file types
set smarttab

" 1 Tab == 2 Spaces
set shiftwidth=2
set tabstop=2

" 100 character linebreaks
" set lbr
" set tw=100

" Auto indents next line based on current line indentation
set autoindent
" Improves syntax aware indenting
set smartindent
" Allow lines to wrap
set wrap

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global Vim buffer config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Hide abandoned buffers
set hid

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global file bindings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Fast save
nmap <leader>w :w!<cr>

" :W saves file as root
command W w !sudo tee % > /dev/null

" Remap VIM 0 to first non-blank character
map 0 ^

" Convienently enable/disable paste mode
map <leader>pp :setlocal paste!<cr>

runtime binds.vim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Helpers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee,*.ts,*.tsx,*.jsx :call helpers.cleanExtraSpaces()
    " Somehow typescript can't figure it's shit out
    " autocmd BufNewFile,BufRead *.ts,*.tsx setlocal filetype=typescript
    " autocmd BufNewFile,BufRead *.tsx setlocal filetype=typescriptreact
    " Comment support for JSON
    autocmd FileType json syntax match Comment +\/\/.\+$+
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Commands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -nargs=0 E     :e
command! -nargs=0 Q     :q
command! -nargs=0 Qa    :qa
command! -nargs=0 T     :tabnew
